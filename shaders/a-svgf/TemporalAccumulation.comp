#version 450
#extension GL_GOOGLE_include_directive : require

/*
Adapted from https://cg.ivd.kit.edu/atf.php
Modifications Copyright 2021/2022 Oskar Homburg

Copyright (c) 2018, Christoph Schied
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Karlsruhe Institute of Technology nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#include "svgf_shared.glsl"
#include "colorspace.glsl"
#include "viridis.glsl"

#include "layout.glsl"

#ifdef ANTILAG
#error "not yet ported"
sampler2D tex_diff_current;

layout(rgba8) image2D img_antilag_alpha;
int gradientDownsample;
usampler2D tex_gradient_samples;

int gradientFilterRadius;
#endif

void main()
{
	ivec2 ipos   = ivec2(gl_GlobalInvocationID.xy);
	ivec2 size   = imageSize(tex_motion).rg;

	vec2 motion   = imageLoad(tex_motion, ipos).rg + jitter_offset;
	vec2 pos_prev = gl_GlobalInvocationID.xy + motion * 0.5 * vec2(textureSize(tex_z_prev, 0));

	ivec2 p = ivec2(pos_prev - 0.5);
	vec2  w = (pos_prev - 0.5) - floor(pos_prev - 0.5);

	vec4  z_curr       = imageLoad(tex_z_curr,      ipos);
	vec3  color_curr   = imageLoad(tex_color,       ipos).rgb;
	vec3  normal_curr  = imageLoad(tex_normal_curr, ipos).rgb;
	float l            = luminance(color_curr);
	vec2  moments_curr = vec2(l, l * l);
	uint mesh_id_curr = floatBitsToUint(imageLoad(tex_vbuf_curr, ipos).r);

	vec4 color_prev   = vec4(0);
	vec2 moments_prev = vec2(0);
	float sum_w       = 0.0;
	float histlen     = 0.0;
	/* bilinear interpolation, check each tap individually, renormalize
	 * afterwards */
	for(int yy = 0; yy <= 1; yy++) {
		for(int xx = 0; xx <= 1; xx++) {
			ivec2 ipos_prev    = p + ivec2(xx, yy);
			float z_prev       = texelFetch(tex_z_prev,      ipos_prev, 0).r;
			vec3  normal_prev  = texelFetch(tex_normal_prev, ipos_prev, 0).rgb;
			uint mesh_id_prev  = floatBitsToUint(imageLoad(tex_vbuf_prev, ipos_prev).r);

			bool accept = true;
			accept = accept && test_inside_screen(ipos_prev, size);
			accept = accept && test_reprojected_normal(normal_curr, normal_prev);
			accept = accept && test_reprojected_depth(z_curr.z, z_prev, z_curr.y);
			accept = accept && mesh_id_prev == mesh_id_curr;

			if(accept) {
				float w = (xx == 0 ? (1.0 - w.x) : w.x)
					    * (yy == 0 ? (1.0 - w.y) : w.y);
				color_prev   += texelFetch(tex_color_prev,    ipos_prev, 0) * w;
				moments_prev += imageLoad(tex_moments_prev,   ipos_prev).rg * w;
				histlen      += imageLoad(tex_history_length, ipos_prev).r  * w;
				sum_w        += w;

			}
		}
	}

#ifdef ANTILAG
	float antilag_alpha = 0.0;

	{
		vec4 v = textureLod(tex_diff_current, texC, 0); // Compute shader port: replace texC using global inv. id

		const float gaussian_kernel[3][3] = {
			{ 1.0 / 16.0, 1.0 / 8.0, 1.0 / 16.0 },
			{ 1.0 / 8.0,  1.0 / 4.0, 1.0 / 8.0  },
			{ 1.0 / 16.0, 1.0 / 8.0, 1.0 / 16.0 }
		};

		const int r = gradientFilterRadius;

		antilag_alpha = 0.0;
		for(int yy = -r; yy <= r; yy++) {
			for(int xx = -r; xx <= r; xx++) {
				vec4 v = imageLoad(tex_diff_current, ipos / gradientDownsample + ivec2(xx, yy));
				float a = clamp(abs(v.r > 1e-4 ? abs(v.g) / v.r : 0.0), 0.0, 200.0);
				float w = 1.0 / float((2 * r + 1) * (2 * r + 1));
				antilag_alpha = max(antilag_alpha, a);
			}
		}
	}

	clamp(antilag_alpha, 0.0, 1.0);
	if(isnan(antilag_alpha))
		antilag_alpha = 1.0;

#endif


	if(sum_w > 0.01) { /* found sufficiently reliable history information */
		color_prev   /= sum_w;
		moments_prev /= sum_w;
		histlen      /= sum_w;


#ifndef ANTILAG
		const float alpha_color   = max(temporal_alpha, 1.0 / (histlen + 1.0));
		const float alpha_moments = max(0.6, 1.0 / (histlen + 1.0));
#else
		float alpha_color   = max(temporal_alpha, 1.0 / (histlen + 1.0));
		float alpha_moments = max(0.6, 1.0 / (histlen + 1.0));

		alpha_color   = mix(alpha_color,   1.0, antilag_alpha);
		alpha_moments = mix(alpha_moments, 1.0, antilag_alpha);

  #ifdef SHOW_ANTILAG_ALPHA
		imageStore(img_antilag_alpha, ipos, vec4(viridis_quintic(alpha_color), 0.0));
  #endif
#endif
		imageStore(img_accumulated, ipos, vec4(mix(color_prev.rgb, color_curr, alpha_color), min(64, histlen + 1.0)));
		imageStore(img_moments, ipos, vec4(mix(moments_prev, moments_curr, alpha_moments), 0, 0));
		#ifdef ANTILAG
		imageStore(img_histlen, ipos, vec4(clamp(1.0 / alpha_color, 0.0, 64.0)));
		#else
		imageStore(img_histlen, ipos, vec4(min(64, histlen + 1.0)));
		#endif
	}
	else
	{
		imageStore(img_accumulated, ipos, vec4(color_curr, 1.0));
		imageStore(img_moments, ipos, vec4(moments_curr, 0, 0));
		imageStore(img_histlen, ipos, vec4(1.0));
#ifdef ANTILAG
  #ifdef SHOW_ANTILAG_ALPHA
		imageStore(img_antilag_alpha, ipos, vec4(viridis_quintic(1), 0.0));
  #endif
#endif
	}

}
