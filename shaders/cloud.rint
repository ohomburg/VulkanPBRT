#version 460
#extension GL_EXT_ray_tracing : enable

bool rayBoxIntersect(vec3 bMin, vec3 bMax, vec3 P, vec3 D, out float tMin, out float tMax)
{
    // un-parallelize D
    D.x = abs(D).x <= 0.000001 ? 0.000001 : D.x;
    D.y = abs(D).y <= 0.000001 ? 0.000001 : D.y;
    D.z = abs(D).z <= 0.000001 ? 0.000001 : D.z;
    vec3 C_Min = (bMin - P)/D;
    vec3 C_Max = (bMax - P)/D;
	tMin = max(max(min(C_Min[0], C_Max[0]), min(C_Min[1], C_Max[1])), min(C_Min[2], C_Max[2]));
	tMin = max(0.0, tMin);
	tMax = min(min(max(C_Min[0], C_Max[0]), max(C_Min[1], C_Max[1])), max(C_Min[2], C_Max[2]));
	if (tMax <= tMin || tMax <= 0) {
		return false;
	}
	return true;
}

void main()
{
    // the corners are always (0,0,0) and (1,1,1)
    float tMin, tMax;
    rayBoxIntersect(vec3(0,0,0), vec3(1,1,1), gl_ObjectRayOriginEXT, gl_ObjectRayDirectionEXT, tMin, tMax);
    // assume there is a hit if this shader is called (API violation, but should at worst be a perf issue)
    float tHit = clamp(tMin, gl_RayTminEXT, gl_RayTmaxEXT);
    reportIntersectionEXT(tHit, 0);
}